local secrets = require("private.licence")

return function(lspconfig, capabilities)
	lspconfig.intelephense.setup({
		capabilities = capabilities,
		init_options = {
			licenceKey = secrets.intelephense_key,
			storagePath = vim.fn.stdpath("cache") .. "/intelephense",
			clearCache = false,
			globalStoragePath = vim.fn.stdpath("data") .. "/intelephense",
		},
		settings = {
			intelephense = {
				files = {
					maxSize = 5000000,
				},
				stubs = {
					-- Core PHP extensions
					"apache",
					"bcmath",
					"bz2",
					"calendar",
					"com_dotnet",
					"Core",
					"ctype",
					"curl",
					"date",
					"dba",
					"dom",
					"enchant",
					"exif",
					"FFI",
					"fileinfo",
					"filter",
					"fpm",
					"ftp",
					"gd",
					"gettext",
					"gmp",
					"hash",
					"iconv",
					"imap",
					"intl",
					"json",
					"ldap",
					"libxml",
					"mbstring",
					"meta",
					"mhash",
					"mysql",
					"mysqli",
					"oci8",
					"odbc",
					"openssl",
					"pcntl",
					"pcre",
					"PDO",
					"pdo_ibm",
					"pdo_mysql",
					"pdo_pgsql",
					"pdo_sqlite",
					"pgsql",
					"Phar",
					"posix",
					"pspell",
					"readline",
					"Reflection",
					"session",
					"shmop",
					"SimpleXML",
					"snmp",
					"soap",
					"sockets",
					"sodium",
					"SPL",
					"sqlite3",
					"standard",
					"superglobals",
					"sysvmsg",
					"sysvsem",
					"sysvshm",
					"tidy",
					"tokenizer",
					"xml",
					"xmlreader",
					"xmlrpc",
					"xmlwriter",
					"xsl",
					"Zend OPcache",
					"zip",
					"random",
					"zlib",
					"memcached",
					"laravel",
					"livewire",
					"eloquent",
					"passport",
					"sanctum",
					"tinker",
				},
				environment = {
					includePaths = {
						vim.fn.getcwd() .. "/vendor",
					},
				},
				diagnostics = {
					enable = true,
				},
			},
		},
		filetypes = { "php", "blade" },
		root_dir = lspconfig.util.root_pattern("composer.json", ".git"),
	})
end
